// Enhanced theme toggle and header functionality
const themeToggle = document.getElementById('theme-toggle');
const root = document.documentElement;
const header = document.querySelector('.header');

// Sticky header functionality
function handleScroll() {
  if (window.scrollY > 50) {
    header.classList.add('scrolled');
  } else {
    header.classList.remove('scrolled');
  }
}

window.addEventListener('scroll', handleScroll);

// Mobile navigation functionality
function initMobileNavigation() {
  const nav = document.querySelector('.nav');
  const navLinks = nav.querySelectorAll('a');
  
  // Create mobile menu toggle button
  const mobileToggle = document.createElement('button');
  mobileToggle.className = 'mobile-menu-toggle';
  mobileToggle.innerHTML = '‚ò∞';
  mobileToggle.setAttribute('aria-label', 'Toggle mobile menu');
  
  // Insert toggle button before nav
  nav.parentNode.insertBefore(mobileToggle, nav);
  
  // Toggle mobile menu
  mobileToggle.addEventListener('click', () => {
    nav.classList.toggle('mobile-open');
    mobileToggle.innerHTML = nav.classList.contains('mobile-open') ? '‚úï' : '‚ò∞';
  });
  
  // Close mobile menu when clicking on links
  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      nav.classList.remove('mobile-open');
      mobileToggle.innerHTML = '‚ò∞';
    });
  });
  
  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    if (!nav.contains(e.target) && !mobileToggle.contains(e.target)) {
      nav.classList.remove('mobile-open');
      mobileToggle.innerHTML = '‚ò∞';
    }
  });
}

// Initialize mobile navigation on load
document.addEventListener('DOMContentLoaded', initMobileNavigation);

function setTheme(theme) {
  root.setAttribute('data-theme', theme);
  localStorage.setItem('theme', theme);
  // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
  if (theme === 'dark') {
    themeToggle.innerHTML = 'üåô';
  } else {
    themeToggle.innerHTML = '‚òÄÔ∏è';
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
(function() {
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme) {
    setTheme(savedTheme);
  } else {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è
    setTheme('light');
  }
})();

themeToggle.addEventListener('click', () => {
  const current = root.getAttribute('data-theme');
  setTheme(current === 'dark' ? 'light' : 'dark');
});

// Enhanced cart functionality with visual feedback
const CART_KEY = 'aksta_cart';

// Update cart counter display
function updateCartCounter() {
  const cart = getCart();
  const counter = document.querySelector('.cart-counter');
  
  if (counter) {
    const itemCount = cart.length;
    if (itemCount > 0) {
      counter.textContent = itemCount;
      counter.classList.add('has-items');
    } else {
      counter.textContent = '';
      counter.classList.remove('has-items');
    }
  }
}

// Show toast notification
function showToast(message, type = 'success') {
  const toast = document.getElementById('toast-notification');
  if (toast) {
    toast.textContent = message;
    toast.className = `toast-notification ${type}`;
    toast.style.display = 'block';
    
    setTimeout(() => {
      toast.style.display = 'none';
    }, 3000);
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
function getCart() {
  try {
    return JSON.parse(localStorage.getItem(CART_KEY)) || [];
  } catch {
    return [];
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function setCart(cart) {
  localStorage.setItem(CART_KEY, JSON.stringify(cart));
}

// Enhanced add to cart function with visual feedback
window.addToCart = function(item) {
  const cart = getCart();
  
  // Enhanced item structure
  const cartItem = {
    id: Date.now().toString(),
    name: item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
    brand: item.brand || '',
    category: item.category || '',
    type: item.type || '',
    comment: item.comment || '',
    image: item.image || '',
    specifications: item.specifications || {},
    dateAdded: new Date().toISOString(),
    priority: item.priority || 'normal'
  };
  
  cart.push(cartItem);
  setCart(cart);
  updateCartCounter();
  showToast(`${cartItem.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`, 'success');
};

// Enhanced cart rendering with improved UI
function renderCart() {
  const cartItemsDiv = document.getElementById('cart-items');
  if (!cartItemsDiv) return;
  
  const cart = getCart();
  
  if (cart.length === 0) {
    cartItemsDiv.innerHTML = `
      <div class="cart-empty">
        <div class="cart-empty-icon">üõí</div>
        <h3>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
        <p>–î–æ–±–∞–≤—å—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É</p>
        <a href="catalog.html" class="btn-main">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥</a>
      </div>
    `;
    return;
  }
  
  let html = '<div class="cart-items-list">';
  cart.forEach((item, index) => {
    html += `
      <div class="cart-item" data-index="${index}">
        <div class="cart-item-image">
          <div class="cart-item-placeholder">üè≠</div>
        </div>
        <div class="cart-item-content">
          <div class="cart-item-header">
            <h4 class="cart-item-name">${item.name}</h4>
            <button class="cart-item-remove" onclick="removeCartItem(${index})" aria-label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä">‚úï</button>
          </div>
          <div class="cart-item-details">
            <span class="cart-item-brand">${item.brand || ''}</span>
            <span class="cart-item-category">${item.type || ''}</span>
          </div>
          <div class="cart-item-description">${item.comment || ''}</div>
          <div class="cart-item-date">–î–æ–±–∞–≤–ª–µ–Ω: ${formatDate(item.dateAdded)}</div>
        </div>
      </div>
    `;
  });
  html += '</div>';
  
  cartItemsDiv.innerHTML = html;
  
  // Add animation to cart items
  const cartItems = cartItemsDiv.querySelectorAll('.cart-item');
  cartItems.forEach((item, index) => {
    item.style.animationDelay = `${index * 0.1}s`;
    item.classList.add('fade-in');
  });
}

// Remove item from cart
function removeCartItem(index) {
  const cart = getCart();
  const item = cart[index];
  
  if (confirm(`–£–¥–∞–ª–∏—Ç—å "${item.name}" –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?`)) {
    cart.splice(index, 1);
    setCart(cart);
    updateCartCounter();
    renderCart();
    showToast('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', 'success');
  }
}

// Format date for display
function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// Enhanced cart counter with animation
function updateCartCounter() {
  const cart = getCart();
  const counter = document.querySelector('.cart-counter');
  
  if (counter) {
    const itemCount = cart.length;
    const previousCount = parseInt(counter.textContent) || 0;
    
    if (itemCount > 0) {
      counter.textContent = itemCount;
      counter.classList.add('has-items');
      
      // Add bounce animation for new items
      if (itemCount > previousCount) {
        counter.classList.add('bounce');
        setTimeout(() => counter.classList.remove('bounce'), 300);
      }
    } else {
      counter.textContent = '';
      counter.classList.remove('has-items');
    }
  }
}

// –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function clearCart() {
  setCart([]);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∫–æ—Ä–∑–∏–Ω—ã
const cartForm = document.getElementById('cart-form');
if (cartForm) {
  cartForm.addEventListener('submit', function(e) {
    e.preventDefault();
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ø–æ email
    alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    clearCart();
    renderCart();
    cartForm.reset();
  });
}

// Enhanced Catalog Functionality
const catalogData = [
  // Existing generic equipment
  {
    id: 1,
    name: '–§—Ä–µ–∑–µ—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ CNC',
    brand: 'Lushong',
    category: 'milling',
    description: '–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–µ–∑–µ—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ —Å –ß–ü–£ –¥–ª—è –ø—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–∞–ª–ª–∞.',
    specifications: ['CNC —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å', '–ú–æ—â–Ω—ã–π —à–ø–∏–Ω–¥–µ–ª—å'],
    badge: '–ù–æ–≤–∏–Ω–∫–∞',
    featured: true
  },
  {
    id: 2,
    name: '–®–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏',
    brand: 'HDCNC',
    category: 'grinding',
    description: '–ü—Ä–µ—Ü–∏–∑–∏–æ–Ω–Ω—ã–µ —à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π.',
    specifications: ['–í—ã—Å–æ–∫–∞—è —á–∏—Å—Ç–æ—Ç–∞', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–∞—á–∞', '–£—Å—Ç–æ–π—á–∏–≤–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'],
    badge: '',
    featured: false
  },
  {
    id: 3,
    name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏',
    brand: 'HNC',
    category: 'milling',
    description: '–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.',
    specifications: ['–ú–Ω–æ–≥–æ–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å', '–≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å'],
    badge: '',
    featured: true
  },
  {
    id: 4,
    name: '–õ–∞–∑–µ—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏',
    brand: 'LASER',
    category: 'laser',
    description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∞–∑–µ—Ä–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–µ–∑–∫–∏ –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –º–µ—Ç–∞–ª–ª–∞.',
    specifications: ['–õ–∞–∑–µ—Ä–Ω–∞—è —Ä–µ–∑–∫–∞', '–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã'],
    badge: 'TOP',
    featured: true
  },
  {
    id: 5,
    name: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ Willer',
    brand: 'Willer',
    category: 'milling',
    description: '–ù–∞–¥—ë–∂–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.',
    specifications: ['–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å', '–ü—Ä–æ—Å—Ç–æ—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', '–î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å'],
    badge: '',
    featured: false
  },
  {
    id: 6,
    name: '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ Dongs',
    brand: 'Dongs',
    category: 'grinding',
    description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–º —Ü–µ–Ω–∞–º.',
    specifications: ['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞', '–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–ë—ã—Å—Ç—Ä–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞'],
    badge: '',
    featured: false
  },
  
  // Esuntek EDM Series - Detailed products
  {
    id: 8,
    name: 'EFH43S/I',
    brand: 'Esuntek',
    category: 'erosion',
    subcategory: 'wire-cut',
    description: '–ü—Ä–æ–≤–æ–ª–æ—á–Ω–æ-–≤—ã—Ä–µ–∑–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ—ç—Ä–æ–∑–∏–æ–Ω–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ —Å —Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞',
    specifications: ['–•–æ–¥ X,Y: 400√ó350 –º–º', '–¢–æ–ª—â–∏–Ω–∞ —Ä–µ–∑–∞: –¥–æ 300 –º–º', '–¢–æ—á–Ω–æ—Å—Ç—å: ¬±0.005 –º–º', '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å: Ra ‚â§0.6Œºm'],
    badge: 'EDM',
    featured: true,
    detailedSpecs: {
      '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å—è–º X,Y': '400√ó350 –º–º',
      '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Z': '250 –º–º',
      '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å—è–º U,V': '60√ó60 –º–º',
      '–†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞': '660√ó505 –º–º',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ —Ä–µ–∑–∞': '300 –º–º (–æ–ø—Ü–∏—è 400,500)',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞': '¬±10¬∞/80mm (–æ–ø—Ü–∏—è 15¬∞,30¬∞,45¬∞)',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '500 –∫–≥',
      '–†–∞–∑–º–µ—Ä —Å—Ç–∞–Ω–∫–∞': '1100√ó1700√ó2100 –º–º',
      '–í–µ—Å —Å—Ç–∞–Ω–∫–∞': '2100 –∫–≥',
      '–≠–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ': '380–í¬±10% 50-60 –ì—Ü',
      '–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ': '<3.0 –∫–í—Ç',
      '–¢–æ—á–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏': '‚â§ ¬±0.005 –º–º',
      '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å': 'Ra ‚â§0.6Œºm',
      '–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏': '0-250 –º–º¬≤/–º–∏–Ω',
      '–î–∏–∞–º–µ—Ç—Ä –ø—Ä–æ–≤–æ–ª–æ–∫–∏': 'Œ¶0.13-œÜ0.2mm (–ú–æ–ª–∏–±–¥–µ–Ω)',
      '–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è': '–°–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å Panasonic (–Ø–ø–æ–Ω–∏—è)',
      '–ß–∏—Å–ª–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': '4 –æ—Å–∏: X-Y-U-V'
    }
  },
  {
    id: 9,
    name: 'EFH54S/I',
    brand: 'Esuntek',
    category: 'erosion',
    subcategory: 'wire-cut',
    description: '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≤–æ–ª–æ—á–Ω–æ-–≤—ã—Ä–µ–∑–Ω–æ–π —Å—Ç–∞–Ω–æ–∫ —Å–µ—Ä–∏–∏ SI —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–±–æ—á–∏–º —Å—Ç–æ–ª–æ–º',
    specifications: ['–•–æ–¥ X,Y: 500√ó400 –º–º', '–¢–æ–ª—â–∏–Ω–∞ —Ä–µ–∑–∞: –¥–æ 300 –º–º', '–¢–æ—á–Ω–æ—Å—Ç—å: ¬±0.005 –º–º', '–í–µ—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏: –¥–æ 700 –∫–≥'],
    badge: 'EDM',
    featured: true,
    detailedSpecs: {
      '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å—è–º X,Y': '500√ó400 –º–º',
      '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Z': '250 –º–º',
      '–†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞': '780√ó555 –º–º',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '880√ó610 –º–º',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '700 –∫–≥',
      '–†–∞–∑–º–µ—Ä —Å—Ç–∞–Ω–∫–∞': '1400√ó1800√ó2100 –º–º',
      '–í–µ—Å —Å—Ç–∞–Ω–∫–∞': '2600 –∫–≥',
      '–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ': '<3.5 –∫–í—Ç'
    }
  },
  {
    id: 10,
    name: 'EFH65S/I',
    brand: 'Esuntek',
    category: 'erosion',
    subcategory: 'wire-cut',
    description: '–ö—Ä—É–ø–Ω—ã–π –ø—Ä–æ–≤–æ–ª–æ—á–Ω–æ-–≤—ã—Ä–µ–∑–Ω–æ–π —Å—Ç–∞–Ω–æ–∫ –¥–ª—è —Å–µ—Ä–∏–π–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
    specifications: ['–•–æ–¥ X,Y: 600√ó500 –º–º', '–¢–æ–ª—â–∏–Ω–∞ —Ä–µ–∑–∞: –¥–æ 300 –º–º', '–í–µ—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏: –¥–æ 900 –∫–≥', '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
    badge: 'EDM',
    featured: true,
    detailedSpecs: {
      '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å—è–º X,Y': '600√ó500 –º–º',
      '–†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞': '880√ó680 –º–º',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '980√ó720 –º–º',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '900 –∫–≥',
      '–†–∞–∑–º–µ—Ä —Å—Ç–∞–Ω–∫–∞': '1750√ó2150√ó2100 –º–º',
      '–í–µ—Å —Å—Ç–∞–Ω–∫–∞': '3000 –∫–≥'
    }
  },
  {
    id: 11,
    name: 'EFH86S/I',
    brand: 'Esuntek',
    category: 'erosion',
    subcategory: 'wire-cut',
    description: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–æ–ª–æ—á–Ω–æ-–≤—ã—Ä–µ–∑–Ω–æ–π —Å—Ç–∞–Ω–æ–∫ –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π',
    specifications: ['–•–æ–¥ X,Y: 800√ó600 –º–º', '–¢–æ–ª—â–∏–Ω–∞ —Ä–µ–∑–∞: –¥–æ 300 –º–º', '–í–µ—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏: –¥–æ 1200 –∫–≥', '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'],
    badge: 'EDM',
    featured: true,
    detailedSpecs: {
      '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å—è–º X,Y': '800√ó600 –º–º',
      '–†–∞–∑–º–µ—Ä —Å—Ç–æ–ª–∞': '990√ó775 –º–º',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '1100√ó840 –º–º',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '1200 –∫–≥',
      '–†–∞–∑–º–µ—Ä —Å—Ç–∞–Ω–∫–∞': '2100√ó2300√ó2200 –º–º',
      '–í–µ—Å —Å—Ç–∞–Ω–∫–∞': '3600 –∫–≥'
    }
  },
  {
    id: 12,
    name: 'EH43-B/C –°—É–ø–µ—Ä–¥—Ä–µ–ª—å',
    brand: 'Esuntek',
    category: 'erosion',
    subcategory: 'drill',
    description: '–≠–ª–µ–∫—Ç—Ä–æ—ç—Ä–æ–∑–∏–æ–Ω–Ω—ã–π —Å–≤–µ—Ä–ª–∏–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–≤–µ—Ä–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ä—Å—Ç–∏–π',
    specifications: ['–•–æ–¥ –æ—Å–µ–π: 400√ó300√ó380 –º–º', '–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞: œÜ0.2-œÜ3.0 –º–º', '–ì–ª—É–±–∏–Ω–∞/–¥–∏–∞–º–µ—Ç—Ä: –¥–æ 300:1', '–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å'],
    badge: '–°—É–ø–µ—Ä–¥—Ä–µ–ª—å',
    featured: true,
    detailedSpecs: {
      '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –æ—Å—è–º': '400√ó300√ó380(W300) –º–º',
      '–•–æ–¥ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞': '500√ó380 –º–º',
      '–î–∏–∞–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–¥–∞': 'œÜ0.2-œÜ3.0 –º–º',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ —Ä–µ–∑–∞': '300 –º–º',
      '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ': '0.005 –º–º',
      '–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏': '30-60 –º–º/–º–∏–Ω',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –∫ –¥–∏–∞–º–µ—Ç—Ä—É': '300:1',
      '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '200 –∫–≥',
      '–ú–∞–∫—Å. —Ä–∞–±–æ—á–∏–π —Ç–æ–∫': '35 –ê',
      '–≠–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ': 'AC3~380V/50-60HZ',
      '–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ': '3.5 –∫–í—Ç',
      '–†–∞–∑–º–µ—Ä –º–∞—à–∏–Ω—ã': '1200√ó1100√ó1900 –º–º',
      '–í–µ—Å –º–∞—à–∏–Ω—ã': '550 –∫–≥'
    }
  },
  {
    id: 13,
    name: 'VG400 –ü–æ–≥—Ä—É–∂–Ω–æ–π',
    brand: 'Esuntek',
    category: 'erosion',
    subcategory: 'wire-cut',
    description: '–ü–æ–≥—Ä—É–∂–Ω–æ–π –ø—Ä–æ–≤–æ–ª–æ—á–Ω–æ-–≤—ã—Ä–µ–∑–Ω–æ–π —Å—Ç–∞–Ω–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–æ–ª–æ–∫–∏',
    specifications: ['–†–∞–∑–º–µ—Ä—ã –∑–∞–≥–æ—Ç–æ–≤–∫–∏: 750√ó550√ó215 –º–º', '–ú–∞—Å—Å–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏: 500 –∫–≥', '–•–æ–¥ X/Y: 400√ó300 –º–º', '–ê–≤—Ç–æ–∑–∞–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≤–æ–ª–æ–∫–∏'],
    badge: 'VG Series',
    featured: true,
    detailedSpecs: {
      '–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä—ã –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '750√ó550√ó215 –º–º',
      '–ú–∞–∫—Å. –º–∞—Å—Å–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏': '500 –∫–≥',
      '–•–æ–¥ –ø–æ –æ—Å—è–º X/Y': '400√ó300 –º–º',
      '–•–æ–¥ –ø–æ –æ—Å—è–º U/V': '80√ó80 –º–º',
      '–•–æ–¥ –ø–æ –æ—Å–∏ Z': '220 –º–º',
      '–î–∏–∞–º–µ—Ç—Ä –ø—Ä–æ–≤–æ–ª–æ–∫–∏-—ç–ª–µ–∫—Ç—Ä–æ–¥–∞': '0.15~0.3 –º–º',
      '–ß–∏—Å–ª–æ –æ—Å–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è': '5 –æ—Å–µ–π, —Å–µ—Ä–≤–æ–¥–≤–∏–≥–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞',
      '–ú–∞–∫—Å. —É–≥–æ–ª –∫–æ–Ω—É—Å–Ω–æ–≥–æ —Ä–µ–∑–∞–Ω–∏—è': '¬±22¬∞/80 –º–º',
      '–†–∞–∑–º–µ—Ä—ã —Å—Ç–∞–Ω–∫–∞': '2100√ó2300√ó2200 –º–º',
      '–ú–∞—Å—Å–∞ —Å—Ç–∞–Ω–∫–∞': '2700 –∫–≥',
      '–ï–º–∫–æ—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –±–∞–∫–∞': '600 –ª'
    }
  }
];

let currentView = 'grid';
let filteredData = [...catalogData];

// Initialize catalog functionality
function initCatalog() {
  if (!document.getElementById('catalog-grid')) return;
  
  // Set initial filtered data
  filteredData = [...catalogData];
  
  renderCatalog();
  initSearch();
  initFilters();
  initViewToggle();
  updateResultsCount();
  
  console.log('Catalog initialized with', catalogData.length, 'products');
}

// Render catalog products
function renderCatalog() {
  const grid = document.getElementById('catalog-grid');
  if (!grid) {
    console.warn('Catalog grid not found!');
    return;
  }
  
  grid.innerHTML = '';
  
  if (filteredData.length === 0) {
    grid.innerHTML = `
      <div class="no-products" style="
        grid-column: 1 / -1;
        text-align: center;
        padding: 3rem;
        color: var(--text-secondary);
      ">
        <h3>üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
        <button class="btn-secondary" onclick="resetFilters()">–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
      </div>
    `;
    return;
  }
  
  filteredData.forEach((product, index) => {
    const card = createProductCard(product);
    grid.appendChild(card);
  });
  
  console.log('Rendered', filteredData.length, 'product cards');
}

// Create product card HTML
function createProductCard(product) {
  const card = document.createElement('div');
  card.className = 'product-card';
  card.setAttribute('data-category', product.category);
  card.setAttribute('data-brand', product.brand.toLowerCase());
  
  card.innerHTML = `
    <div class="product-card-image">
      ${product.badge ? `<div class="product-card-badge">${product.badge}</div>` : ''}
      ${getProductIcon(product.category, product.subcategory)}
    </div>
    <div class="product-card-content">
      <div class="product-card-header">
        <div class="product-card-brand">${product.brand}</div>
        <h3 class="product-card-title">${product.name}</h3>
        <div class="product-card-category">${getCategoryName(product.category)}</div>
      </div>
      <div class="product-card-description">${product.description}</div>
      <div class="product-card-specs">
        <h4>–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h4>
        <div class="product-specs-list">
          ${product.specifications.map(spec => `<span class="spec-item">${spec}</span>`).join('')}
        </div>
      </div>
      <div class="product-card-actions">
        <button class="btn-card-primary" onclick="addProductToCart(${product.id})">–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
        <button class="btn-card-secondary" onclick="showProductDetails(${product.id})">
          ${product.detailedSpecs ? '–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'}
        </button>
      </div>
    </div>
  `;
  
  return card;
}

// Get product icon based on category
function getProductIcon(category, subcategory) {
  if (category === 'erosion') {
    if (subcategory === 'wire-cut') return '‚ö°';
    if (subcategory === 'drill') return 'üî©';
    return '‚ö°';
  }
  if (category === 'milling') return '‚öôÔ∏è';
  if (category === 'grinding') return 'üîß';
  if (category === 'laser') return 'üî•';
  return 'üè≠';
}

// Get category display name
function getCategoryName(category) {
  const categoryNames = {
    'milling': '–§—Ä–µ–∑–µ—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏',
    'grinding': '–®–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏',
    'laser': '–õ–∞–∑–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    'erosion': '–≠—Ä–æ–∑–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏'
  };
  return categoryNames[category] || category;
}

// Add product to cart
function addProductToCart(productId) {
  const product = catalogData.find(p => p.id === productId);
  if (product) {
    addToCart({
      name: product.name,
      brand: product.brand,
      category: product.category,
      type: getCategoryName(product.category),
      comment: product.description
    });
  }
}

// Initialize search functionality
function initSearch() {
  const searchInput = document.getElementById('catalog-search');
  if (!searchInput) return;
  
  let debounceTimer;
  searchInput.addEventListener('input', (e) => {
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => {
      filterCatalog();
    }, 300);
  });
}


// Filter catalog based on current selections
function filterCatalog() {
  const searchTerm = document.getElementById('catalog-search')?.value.toLowerCase() || '';
  const selectedCategory = document.querySelector('input[name="category"]:checked')?.value || 'all';
  const selectedBrands = Array.from(document.querySelectorAll('.filter-group input[type="checkbox"]:checked'))
    .map(input => input.value.toLowerCase());
  
  filteredData = catalogData.filter(product => {
    // Search matching
    const matchesSearch = product.name.toLowerCase().includes(searchTerm) || 
                         product.brand.toLowerCase().includes(searchTerm) ||
                         product.description.toLowerCase().includes(searchTerm);
    
    // Category matching
    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
    
    // Brand matching - improved logic
    let matchesBrand = selectedBrands.length === 0;
    if (selectedBrands.length > 0) {
      const productBrand = product.brand.toLowerCase();
      matchesBrand = selectedBrands.some(selectedBrand => {
        // Direct match
        if (productBrand === selectedBrand) return true;
        // Handle special cases
        if (selectedBrand === 'esuntek' && productBrand === 'esuntek') return true;
        if (selectedBrand === 'dongs' && productBrand === 'dongs') return true;
        return false;
      });
    }
    
    return matchesSearch && matchesCategory && matchesBrand;
  });
  
  console.log('Filtered products:', filteredData.length); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  renderCatalog();
  updateResultsCount();
}

// Reset all filters
function resetFilters() {
  const searchInput = document.getElementById('catalog-search');
  if (searchInput) searchInput.value = '';
  
  const allCategoryRadio = document.querySelector('input[name="category"][value="all"]');
  if (allCategoryRadio) allCategoryRadio.checked = true;
  
  document.querySelectorAll('.filter-group input[type="checkbox"]').forEach(input => {
    input.checked = false;
  });
  
  filterCatalog();
}

// Initialize view toggle
function initViewToggle() {
  const toggleButtons = document.querySelectorAll('.view-toggle');
  toggleButtons.forEach(button => {
    button.addEventListener('click', () => {
      const view = button.dataset.view;
      switchView(view);
    });
  });
}

// Switch between grid and list view
function switchView(view) {
  currentView = view;
  const grid = document.getElementById('catalog-grid');
  const toggleButtons = document.querySelectorAll('.view-toggle');
  
  // Update active button
  toggleButtons.forEach(btn => {
    btn.classList.toggle('active', btn.dataset.view === view);
  });
  
  // Update grid class
  grid.className = view === 'list' ? 'catalog-grid list-view' : 'catalog-grid';
}

// Update results count
function updateResultsCount() {
  const countElement = document.getElementById('results-count');
  if (countElement) {
    countElement.textContent = filteredData.length;
  }
  
  // Update pagination info if needed
  const paginationInfo = document.querySelector('.pagination-info');
  if (paginationInfo && filteredData.length > 0) {
    paginationInfo.textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1`;
  }
}

// Product Details Modal Functionality
function showProductDetails(productId) {
  const product = catalogData.find(p => p.id === productId);
  if (!product || !product.detailedSpecs) {
    showToast('–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã', 'info');
    return;
  }
  
  // Create modal if it doesn't exist
  let modal = document.getElementById('product-details-modal');
  if (!modal) {
    modal = createProductModal();
    document.body.appendChild(modal);
  }
  
  // Populate modal with product details
  const modalTitle = modal.querySelector('.modal-title');
  const modalBody = modal.querySelector('.modal-body');
  
  modalTitle.textContent = `${product.brand} ${product.name}`;
  
  modalBody.innerHTML = `
    <div class="product-modal-info">
      <div class="product-modal-header">
        <div class="product-badge">${product.badge || ''}</div>
        <p class="product-description">${product.description}</p>
      </div>
      <div class="specs-section">
        <h3>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
        <div class="specs-grid">
          ${Object.entries(product.detailedSpecs)
            .map(([key, value]) => `
              <div class="spec-row">
                <div class="spec-label">${key}:</div>
                <div class="spec-value">${value}</div>
              </div>
            `).join('')}
        </div>
      </div>
      <div class="modal-actions">
        <button class="btn-card-primary" onclick="addProductToCart(${product.id}); closeModal()">
          –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
        </button>
      </div>
    </div>
  `;
  
  // Show modal
  modal.classList.add('show');
  document.body.style.overflow = 'hidden';
}

function createProductModal() {
  const modal = document.createElement('div');
  modal.id = 'product-details-modal';
  modal.className = 'modal';
  
  modal.innerHTML = `
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title"></h2>
        <button class="modal-close" onclick="closeModal()" aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
      </div>
      <div class="modal-body"></div>
    </div>
  `;
  
  // Close modal on backdrop click
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });
  
  // Close modal on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.classList.contains('show')) {
      closeModal();
    }
  });
  
  return modal;
}

function closeModal() {
  const modal = document.getElementById('product-details-modal');
  if (modal) {
    modal.classList.remove('show');
    document.body.style.overflow = '';
  }
}

// Initialize filter functionality
function initFilters() {
  // Add Esuntek to brand filters dynamically
  addEsuntekFilter();
  
  // Category filters
  const categoryInputs = document.querySelectorAll('input[name="category"]');
  categoryInputs.forEach(input => {
    input.addEventListener('change', filterCatalog);
  });
  
  // Brand filters - get all checkboxes after adding Esuntek
  const brandInputs = document.querySelectorAll('.filter-group input[type="checkbox"]');
  brandInputs.forEach(input => {
    input.addEventListener('change', filterCatalog);
  });
  
  // Reset filters
  const resetButton = document.querySelector('.filter-reset');
  if (resetButton) {
    resetButton.addEventListener('click', resetFilters);
  }
}

// Add Esuntek filter option
function addEsuntekFilter() {
  const brandSections = document.querySelectorAll('.filter-section');
  let brandSection = null;
  
  // Find the brands section
  brandSections.forEach(section => {
    const heading = section.querySelector('h3');
    if (heading && heading.textContent.trim() === '–ë—Ä–µ–Ω–¥—ã') {
      brandSection = section.querySelector('.filter-group');
    }
  });
  
  if (brandSection && !brandSection.querySelector('input[value="esuntek"]')) {
    const esuntekOption = document.createElement('label');
    esuntekOption.className = 'filter-option';
    esuntekOption.innerHTML = `
      <input type="checkbox" value="esuntek">
      <span>Esuntek</span>
    `;
    
    // Add event listener immediately
    const checkbox = esuntekOption.querySelector('input');
    checkbox.addEventListener('change', filterCatalog);
    
    brandSection.appendChild(esuntekOption);
  }
}

// Initialize catalog on catalog page
if (window.location.pathname.endsWith('catalog.html')) {
  document.addEventListener('DOMContentLoaded', initCatalog);
}
